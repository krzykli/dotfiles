set icons
set relativenumber
set ratios 1:2:3
set hidden

cmd open $nvim "$fx"

cmd mkdir % printf "Directory Name: "; read ans; mkdir $ans

cmd mkfile % printf "File Name: "; read ans; touch $ans; echo ðŸŽ‰ $ans created

map m

map mf mkfile
map md mkdir
map C-n mkfile
map DD delete
map gw cd ~/workspace

map f $nvim $(fzf)

cmd fzf_file_jump ${{
    res="$(find . -type f | fzf --reverse --header='Jump to file directory')"
    if [ -f "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd `dirname \"$res\"`"
}}

map F :fzf_file_jump

cmd fzf_dir_jump ${{
    res="$(find . -type d -maxdepth 1 | fzf --reverse --header='Jump to location')"
    if [ -d "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

map t :fzf_dir_jump

cmd fzf_dir_jump_deep ${{
    res="$(find . -type d | fzf --reverse --header='Jump to location')"
    if [ -d "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

map T :fzf_dir_jump_deep


cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map . zle-cd
    map a zle-insert-relative
    map A zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"
